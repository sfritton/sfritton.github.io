{"version":3,"sources":["webpack:///./src/simulations/util/PhysicsSimulation.ts","webpack:///./src/simulations/util/ScreenUtils.ts","webpack:///./src/simulations/gravity/Planet.ts","webpack:///./src/simulations/gravity/StationaryPlanet.ts","webpack:///./src/simulations/gravity/scenarios.ts","webpack:///./src/simulations/gravity/Gravity.ts","webpack:///./src/simulations/gravity/index.ts","webpack:///./src/pages/projects/simulations/gravity.tsx"],"names":["PhysicsSimulation","p5","verbose","startMS","currMS","prevMS","frames","setup","this","millis","calculateTime","fps","Math","floor","console","log","Simulation","screenUtils","pixelsPerMeter","screenHeight","screenWidth","init","pxpm","h","w","transformCoordinates","x","y","transformScalar","n","Planet","mass","radius","position","velocity","customColor","netForces","clearForces","addForce","force","updatePosition","deltaT","acceleration","manageCollisions","otherPlanets","forEach","otherPlanet","norm","magnitude","sqrt","render","setColor","renderedDiameter","max","renderedPosition","strokeWeight","point","stroke","color","min","StationaryPlanet","GravityScenario","name","planetGenerator","generatePlanets","allScenarios","Gravity","planets","simulationTitle","height","width","loadScenario","scenarioName","newScenario","find","s","scenario","background","simulateFrame","calculateForces","updatePositions","planet","renderSimulationTitle","textSize","textFont","fill","text","i","length","planet1","j","planet2","calculateGravity","strength","gravity","selectRef","gravitySim","draw","current","addEventListener","e","preventDefault","target","value","GravityPage","useRef","Layout","title","sketch","ref","map","key"],"mappings":"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","file":"component---src-pages-projects-simulations-gravity-tsx-e57ed4c311af800c4a63.js","sourcesContent":["import P5 from 'p5';\nimport { Simulation } from './Simulation';\n\nexport class PhysicsSimulation extends Simulation {\n  /** Enable additional console logging. Just average FPS for now. */\n  verbose = false;\n  /** A timestamp of the simulation start time. */\n  startMS = 0;\n  /** A timestamp of the beginning of the current frame. */\n  currMS = 0;\n  /** A timestamp of the beginning of the previous frame. */\n  prevMS = 0;\n  /** The total number of frames that have been rendered. */\n  frames = 0;\n\n  /** Pass the verbose flag to show the average FPS */\n  constructor(p5: P5, verbose?: boolean) {\n    super(p5);\n    this.verbose = verbose ?? false;\n  }\n\n  /** Call during p5.setup to create the canvas and initialize the timing. */\n  setup() {\n    // create the canvas\n    super.setup();\n\n    // Initialize the timing\n    this.currMS = this.p5.millis();\n    this.startMS = this.currMS;\n    this.prevMS = this.currMS;\n  }\n\n  /** Determine how many seconds have passed since the previous frame. */\n  calculateTime() {\n    this.frames++;\n    this.prevMS = this.currMS;\n    this.currMS = this.p5.millis();\n\n    if (this.verbose) {\n      const fps = Math.floor((this.frames / (this.currMS - this.startMS)) * 1000);\n      console.log(`Running at ${fps} FPS`);\n    }\n\n    return (this.currMS - this.prevMS) / 1000;\n  }\n}\n","import { Coordinates } from './types';\n\nclass ScreenUtils {\n  pixelsPerMeter: number = 0;\n  screenHeight: number = 0;\n  screenWidth: number = 0;\n\n  init(pxpm: number, h: number, w = h) {\n    this.pixelsPerMeter = pxpm;\n    this.screenHeight = h;\n    this.screenWidth = w;\n  }\n\n  transformCoordinates({ x, y }: Coordinates) {\n    return {\n      x: x * this.pixelsPerMeter + this.screenWidth / 2,\n      y: -y * this.pixelsPerMeter + this.screenHeight / 2,\n    };\n  }\n\n  transformScalar(n: number) {\n    return n * this.pixelsPerMeter;\n  }\n}\n\nexport const screenUtils = new ScreenUtils();\n","import P5 from 'p5';\nimport { Coordinates } from '../util/types';\nimport { screenUtils } from '../util/ScreenUtils';\n\nexport class Planet {\n  p5: P5;\n  mass: number;\n  radius: number;\n  position: Coordinates;\n  velocity: Coordinates;\n  netForces: Coordinates = { x: 0, y: 0 };\n  customColor?: string;\n\n  constructor(\n    p5: P5,\n    mass: number,\n    radius: number,\n    position: Coordinates,\n    velocity: Coordinates,\n    customColor?: string,\n  ) {\n    this.p5 = p5;\n    this.mass = mass;\n    this.radius = radius;\n    this.position = position;\n    this.velocity = velocity;\n    this.customColor = customColor;\n  }\n\n  clearForces() {\n    this.netForces = { x: 0, y: 0 };\n  }\n\n  addForce(force: Coordinates) {\n    this.netForces = {\n      x: this.netForces.x + force.x,\n      y: this.netForces.y + force.y,\n    };\n  }\n\n  updatePosition(deltaT: number) {\n    const acceleration = {\n      x: this.netForces.x / this.mass,\n      y: this.netForces.y / this.mass,\n    };\n\n    this.velocity.x += acceleration.x * deltaT;\n    this.velocity.y += acceleration.y * deltaT;\n\n    this.position.x += this.velocity.x * deltaT;\n    this.position.y += this.velocity.y * deltaT;\n  }\n\n  // TODO\n  manageCollisions(otherPlanets: Planet[]) {\n    otherPlanets.forEach((otherPlanet) => {\n      if (otherPlanet === this) return;\n\n      const norm = {\n        x: this.position.x - otherPlanet.position.x,\n        y: this.position.y - otherPlanet.position.y,\n      };\n      const magnitude = Math.sqrt(norm.x * norm.x + norm.y * norm.y);\n\n      // The planets are not touching\n      if (magnitude >= this.radius + otherPlanet.radius) return;\n\n      this.position = {\n        x: otherPlanet.position.x + (norm.x / magnitude) * this.radius + otherPlanet.radius,\n        y: otherPlanet.position.y + (norm.y / magnitude) * this.radius + otherPlanet.radius,\n      };\n\n      // TODO - need a dot product here\n      this.velocity = {\n        x: this.velocity.x,\n        y: this.velocity.y,\n      };\n    });\n  }\n\n  render() {\n    this.setColor();\n    const renderedDiameter = Math.max(5, screenUtils.transformScalar(this.radius * 2));\n    const renderedPosition = screenUtils.transformCoordinates(this.position);\n\n    this.p5.strokeWeight(renderedDiameter);\n    this.p5.point(renderedPosition.x, renderedPosition.y);\n  }\n\n  setColor() {\n    if (this.customColor) {\n      this.p5.stroke(this.customColor);\n      return;\n    }\n\n    const maxMass = 500;\n    const cappedMass = Math.min(this.mass, maxMass);\n    const color = (cappedMass / maxMass) * 255;\n\n    this.p5.stroke(color, 200, 255 - color);\n  }\n}\n","import P5 from 'p5';\nimport { Coordinates } from '../util/types';\nimport { Planet } from './Planet';\n\nexport class StationaryPlanet extends Planet {\n  constructor(p5: P5, mass: number, radius: number, position: Coordinates) {\n    super(p5, mass, radius, position, { x: 0, y: 0 });\n  }\n\n  updatePosition(deltaT: number) {\n    return;\n  }\n}\n","import P5 from 'p5';\nimport { Planet } from './Planet';\nimport { StationaryPlanet } from './StationaryPlanet';\n\ntype PlanetGenerator = (p5: P5) => Planet[];\n\nexport class GravityScenario {\n  name: string;\n  planetGenerator: PlanetGenerator;\n\n  constructor(name: string, planetGenerator: PlanetGenerator) {\n    this.name = name;\n    this.planetGenerator = planetGenerator;\n  }\n\n  generatePlanets(p5: P5) {\n    return this.planetGenerator(p5);\n  }\n}\n\nconst ourSolarSystem = new GravityScenario('Our Solar System', (p5) => [\n  new StationaryPlanet(p5, 3330, 1.1, { x: 0, y: 0 }), // Sun\n  new Planet(p5, 0.0005, 0.1, { x: 0, y: -2 }, { x: 8.5, y: 0 }, '#d7955f'), // Mercury\n  new Planet(p5, 0.008, 0.1, { x: 0, y: 3.5 }, { x: -7.5, y: 0 }, '#ef9d5c'), // Venus\n  new Planet(p5, 0.01, 0.1, { x: 0, y: -5 }, { x: 7.75, y: 0 }, '#5dacdb'), // Earth\n  new Planet(p5, 0.001, 0.1, { x: 0, y: 6.5 }, { x: -8, y: 0 }, '#bd3206'), // Mars\n  new Planet(p5, 3.17, 0.6, { x: 0, y: -9 }, { x: 8, y: 0 }, '#E4D0B1'), // Jupiter\n  new Planet(p5, 0.95, 0.5, { x: 0, y: 12 }, { x: -8, y: 0 }, '#c4cf9f'), // Saturn\n  new Planet(p5, 0.15, 0.3, { x: 0, y: -14 }, { x: 8, y: 0 }, '#b1e5e8'), // Uranus\n  new Planet(p5, 0.17, 0.3, { x: 0, y: 16 }, { x: -8, y: 0 }, '#4793BF'), // Neptune\n]);\n\nconst binarySolarSystem = new GravityScenario('Binary Solar System', (p5) => [\n  // Stars\n  new Planet(p5, 3330, 1.1, { x: -5, y: 0 }, { x: 0, y: 5 }, '#ff8822'),\n  new Planet(p5, 3330, 1.5, { x: 5, y: 0 }, { x: 0, y: -5 }),\n\n  // Planets\n  new Planet(p5, 0.01, 0.3, { x: 0, y: 8 }, { x: -10, y: 0 }, '#ef9d5c'),\n  new Planet(p5, 0.01, 0.1, { x: 0, y: -10 }, { x: 11, y: 0 }, '#d7955f'),\n  new Planet(p5, 0.01, 0.1, { x: 0, y: 12 }, { x: -11, y: 0 }, '#5dacdb'),\n  new Planet(p5, 0.01, 0.5, { x: 0, y: -16 }, { x: 11, y: 0 }, '#c4cf9f'),\n]);\n\nexport const allScenarios = [ourSolarSystem, binarySolarSystem];\n","import { PhysicsSimulation } from '../util/PhysicsSimulation';\nimport { Planet } from './Planet';\nimport { screenUtils } from '../util/ScreenUtils';\nimport { GravityScenario, allScenarios } from './scenarios';\n\nconst GRAVITY = 0.02;\n\nexport class Gravity extends PhysicsSimulation {\n  planets: Planet[] = [];\n  simulationTitle: string = '';\n  scenario!: GravityScenario;\n\n  setup() {\n    super.setup();\n    screenUtils.init(this.p5.height / 35, this.p5.height, this.p5.width);\n\n    this.loadScenario(allScenarios[0].name);\n  }\n\n  loadScenario(scenarioName: string) {\n    const newScenario = allScenarios.find((s) => s.name === scenarioName);\n    if (!newScenario) return;\n\n    this.scenario = newScenario;\n    this.planets = this.scenario.generatePlanets(this.p5);\n    this.simulationTitle = this.scenario.name;\n    this.p5.background(0);\n  }\n\n  simulateFrame() {\n    this.calculateForces();\n    this.updatePositions();\n  }\n\n  render() {\n    this.p5.background(0, 5);\n    this.planets.forEach((planet) => planet.render());\n    this.renderSimulationTitle();\n  }\n\n  renderSimulationTitle() {\n    this.p5.textSize(16);\n    this.p5.textFont('monospace');\n    this.p5.fill(255);\n    this.p5.stroke(0);\n    this.p5.text(this.simulationTitle, 15, 25);\n  }\n\n  calculateForces() {\n    this.planets.forEach((planet) => planet.clearForces());\n\n    for (let i = 0; i < this.planets.length; i++) {\n      const planet1 = this.planets[i];\n\n      for (let j = i + 1; j < this.planets.length; j++) {\n        const planet2 = this.planets[j];\n        const force = this.calculateGravity(planet1, planet2);\n        planet1.addForce(force);\n        planet2.addForce({ x: -force.x, y: -force.y });\n      }\n    }\n  }\n\n  calculateGravity(planet1: Planet, planet2: Planet) {\n    const norm = {\n      x: planet2.position.x - planet1.position.x,\n      y: planet2.position.y - planet1.position.y,\n    };\n\n    const magnitude = Math.sqrt(norm.x * norm.x + norm.y * norm.y);\n\n    if (magnitude === 0) return { x: 0, y: 0 };\n\n    const strength = (GRAVITY * planet1.mass * planet2.mass) / (magnitude * magnitude);\n\n    return {\n      x: norm.x * strength,\n      y: norm.y * strength,\n    };\n  }\n\n  updatePositions() {\n    const deltaT = this.calculateTime();\n    this.planets.forEach((planet) => planet.updatePosition(deltaT));\n  }\n}\n","import P5 from 'p5';\nimport { RefObject } from 'react';\nimport { Gravity } from './Gravity';\n\nexport const gravity = (selectRef: RefObject<HTMLSelectElement>) => (p5: P5) => {\n  const gravitySim = new Gravity(p5);\n\n  p5.setup = function () {\n    gravitySim.setup();\n  };\n\n  p5.draw = function () {\n    gravitySim.simulateFrame();\n    gravitySim.render();\n  };\n\n  // TODO: there's got to be a better way to do this\n  selectRef.current?.addEventListener('change', (e) => {\n    e.preventDefault();\n\n    // @ts-expect-error\n    const scenario = e.target?.value;\n\n    gravitySim.loadScenario(scenario);\n  });\n};\n","import React, { useRef } from 'react';\nimport { PageProps } from 'gatsby';\nimport Layout from '../../../components/Layout';\nimport { Simulation } from '../../../components/Simulation';\nimport { gravity } from '../../../simulations/gravity';\nimport { allScenarios } from '../../../simulations/gravity/scenarios';\n\nconst GravityPage: React.FC<PageProps> = () => {\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  return (\n    <Layout title=\"Gravity Simulation\">\n      <h1>Gravity Simulation</h1>\n      <Simulation sketch={gravity(selectRef)} />\n      <select ref={selectRef}>\n        {allScenarios.map(({ name }) => (\n          <option key={name} value={name}>\n            {name}\n          </option>\n        ))}\n      </select>\n    </Layout>\n  );\n};\n\nexport default GravityPage;\n"],"sourceRoot":""}