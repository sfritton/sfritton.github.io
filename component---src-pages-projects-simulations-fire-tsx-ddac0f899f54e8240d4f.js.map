{"version":3,"sources":["webpack:///./src/simulations/util/PhysicsSimulation.ts","webpack:///./src/simulations/util/PhysicsSimulation3D.ts","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./src/simulations/fire/Particle.ts","webpack:///./src/simulations/fire/constants.ts","webpack:///./src/simulations/fire/Fire.ts","webpack:///./src/simulations/fire/index.ts","webpack:///./src/pages/projects/simulations/fire.tsx","webpack:///./src/simulations/util/helpers.ts"],"names":["PhysicsSimulation","p5","verbose","startMS","currMS","prevMS","frames","setup","this","millis","calculateTime","fps","Math","floor","console","log","Simulation","PhysicsSimulation3D","cameraRadius","cameraTarget","x","y","z","cameraPosition","cameraTheta","is3D","placeCamera","moveCamera","isMousePressed","PI","mouseX","width","cursor","MOVE","HAND","cos","sin","camera","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Particle","center","color","r","g","b","position","randomPosition","velocity","randomVelocity","remainingLife","randomFromTo","Constructor","protoProps","staticProps","render","strokeWeight","stroke","point","randomDirection","denom","sqrt","randomSpeed","random","update","deltaT","updatePosition","updateColor","updateLife","prototype","Fire","particles","simulate","emitParticles","updateParticles","killParticles","background","numNewParticles","push","filter","particle","isDead","fire","draw","FirePage","Layout","title","sketch","min","max"],"mappings":"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","file":"component---src-pages-projects-simulations-fire-tsx-ddac0f899f54e8240d4f.js","sourcesContent":["import P5 from 'p5';\nimport { Simulation } from './Simulation';\n\nexport class PhysicsSimulation extends Simulation {\n  /** Enable additional console logging. Just average FPS for now. */\n  verbose = false;\n  /** A timestamp of the simulation start time. */\n  startMS = 0;\n  /** A timestamp of the beginning of the current frame. */\n  currMS = 0;\n  /** A timestamp of the beginning of the previous frame. */\n  prevMS = 0;\n  /** The total number of frames that have been rendered. */\n  frames = 0;\n\n  /** Pass the verbose flag to show the average FPS */\n  constructor(p5: P5, verbose?: boolean) {\n    super(p5);\n    this.verbose = verbose ?? false;\n  }\n\n  /** Call during p5.setup to create the canvas and initialize the timing. */\n  setup() {\n    // create the canvas\n    super.setup();\n\n    // Initialize the timing\n    this.currMS = this.p5.millis();\n    this.startMS = this.currMS;\n    this.prevMS = this.currMS;\n  }\n\n  /** Determine how many seconds have passed since the previous frame. */\n  calculateTime() {\n    this.frames++;\n    this.prevMS = this.currMS;\n    this.currMS = this.p5.millis();\n\n    if (this.verbose) {\n      const fps = Math.floor((this.frames / (this.currMS - this.startMS)) * 1000);\n      console.log(`Running at ${fps} FPS`);\n    }\n\n    return (this.currMS - this.prevMS) / 1000;\n  }\n}\n","import P5 from 'p5';\nimport { PhysicsSimulation } from './PhysicsSimulation';\nimport { Coordinates3D } from './types';\n\nexport class PhysicsSimulation3D extends PhysicsSimulation {\n  /** The coordinates that the camera points towards. */\n  cameraTarget: Coordinates3D = { x: 0, y: 0, z: 0 };\n  /** The camera's location */\n  cameraPosition: Coordinates3D = { x: 0, y: 0, z: 0 };\n  /** The distance from the camera to the it's target */\n  cameraRadius: number;\n  /** The camera's angle around the Y axis. */\n  cameraTheta = 0;\n\n  constructor(p5: P5, verbose?: boolean, cameraRadius = 150) {\n    super(p5, verbose);\n    this.cameraRadius = cameraRadius;\n    this.is3D = true;\n  }\n\n  /** Initialize timing and camera */\n  setup() {\n    // init timing\n    super.setup();\n\n    // init camera\n    this.placeCamera();\n  }\n\n  moveCamera() {\n    if (this.isMousePressed()) {\n      this.cameraTheta = (2 * this.p5.PI * (this.p5.mouseX - this.p5.width / 2)) / this.p5.width;\n      this.p5.cursor(this.p5.MOVE);\n    } else {\n      this.p5.cursor(this.p5.HAND);\n    }\n\n    this.placeCamera();\n  }\n\n  placeCamera() {\n    this.cameraPosition = {\n      x: this.cameraTarget.x + this.cameraRadius * this.p5.cos(this.cameraTheta),\n      y: this.cameraTarget.y - 100,\n      z: this.cameraTarget.z + this.cameraRadius * this.p5.sin(this.cameraTheta),\n    };\n\n    this.p5.camera(\n      this.cameraPosition.x,\n      this.cameraPosition.y,\n      this.cameraPosition.z,\n      this.cameraTarget.x,\n      this.cameraTarget.y,\n      this.cameraTarget.z,\n      0,\n      1,\n      0,\n    );\n  }\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import P5 from 'p5';\nimport { randomFromTo } from '../util/helpers';\nimport { Coordinates3D } from '../util/types';\nimport {\n  PARTICLE_MIN_LIFE,\n  PARTICLE_MAX_LIFE,\n  PARTICLE_DIAMETER,\n  EMIT_RADIUS,\n  PARTICLE_SPEED,\n  COLOR_SPEED,\n  GRAVITY,\n} from './constants';\n\ninterface Color {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport class Particle {\n  p5: P5;\n  position: Coordinates3D;\n  velocity: Coordinates3D;\n  remainingLife: number;\n  color: Color = {\n    r: 255,\n    g: 255,\n    b: 255,\n  };\n\n  constructor(p5: P5, center: Coordinates3D) {\n    this.p5 = p5;\n    this.position = this.randomPosition(center);\n    this.velocity = this.randomVelocity();\n    this.remainingLife = randomFromTo(PARTICLE_MIN_LIFE, PARTICLE_MAX_LIFE);\n  }\n\n  render() {\n    this.p5.strokeWeight(PARTICLE_DIAMETER * this.remainingLife);\n    this.p5.stroke(this.color.r, this.color.g, this.color.b);\n    this.p5.point(this.position.x, this.position.y, this.position.z);\n  }\n\n  /** Choose a random position on the surface of a sphere */\n  randomPosition(center: Coordinates3D): Coordinates3D {\n    const randomDirection: Coordinates3D = {\n      x: randomFromTo(-1, 1),\n      y: randomFromTo(-1, 1),\n      z: randomFromTo(-1, 1),\n    };\n\n    const denom = Math.sqrt(\n      randomDirection.x * randomDirection.x +\n        randomDirection.y * randomDirection.y +\n        randomDirection.z * randomDirection.z,\n    );\n\n    return {\n      x: center.x + (EMIT_RADIUS * randomDirection.x) / denom,\n      y: center.y + (EMIT_RADIUS * randomDirection.y) / denom,\n      z: center.z + (EMIT_RADIUS * randomDirection.z) / denom,\n    };\n  }\n\n  randomVelocity(): Coordinates3D {\n    const randomDirection: Coordinates3D = {\n      x: randomFromTo(-1, 1),\n      y: randomFromTo(-1, 0), // only let particles move up\n      z: randomFromTo(-1, 1),\n    };\n\n    const randomSpeed = Math.random();\n\n    const denom = Math.sqrt(\n      randomDirection.x * randomDirection.x +\n        randomDirection.y * randomDirection.y +\n        randomDirection.z * randomDirection.z,\n    );\n\n    return {\n      x: ((randomDirection.x / denom) * randomSpeed * PARTICLE_SPEED) / 4,\n      y: (randomDirection.y / denom) * randomSpeed * PARTICLE_SPEED, // particles should move faster in the y direction\n      z: ((randomDirection.z / denom) * randomSpeed * PARTICLE_SPEED) / 4,\n    };\n  }\n\n  update(deltaT: number) {\n    this.updatePosition(deltaT);\n    this.updateColor(deltaT);\n    this.updateLife(deltaT);\n  }\n\n  get isDead() {\n    return this.remainingLife <= 0;\n  }\n\n  updateLife(deltaT: number) {\n    this.remainingLife -= deltaT;\n  }\n\n  updatePosition(deltaT: number) {\n    this.velocity.y += GRAVITY * deltaT;\n\n    this.position = {\n      x: this.position.x + this.velocity.x * deltaT,\n      y: this.position.y + this.velocity.y * deltaT,\n      z: this.position.z + this.velocity.z * deltaT,\n    };\n  }\n\n  updateColor(deltaT: number) {\n    this.color.g = Math.floor(this.color.g - COLOR_SPEED * deltaT);\n    this.color.b = Math.floor(this.color.b - COLOR_SPEED * deltaT);\n  }\n}\n","export const EMIT_RADIUS = 10;\n\n/** Rate at which particle color changes */\nexport const COLOR_SPEED = 10;\n\nexport const GRAVITY = 1;\n\n// particles\nexport const PARTICLES_PER_SECOND = 500;\nexport const PARTICLE_SPEED = 40;\nexport const PARTICLE_DIAMETER = 4;\nexport const PARTICLE_MIN_LIFE = 0.5;\nexport const PARTICLE_MAX_LIFE = 4;\n","import { PhysicsSimulation3D } from '../util/PhysicsSimulation3D';\nimport { Particle } from './Particle';\nimport { PARTICLES_PER_SECOND } from './constants';\n\nexport class Fire extends PhysicsSimulation3D {\n  particles: Particle[] = [];\n\n  simulate() {\n    const deltaT = this.calculateTime();\n    if (this.verbose) {\n      console.log(`${this.particles.length} particles`);\n    }\n\n    // emit new particles\n    this.emitParticles(deltaT);\n\n    // update existing particles\n    this.updateParticles(deltaT);\n\n    // remove dead particles\n    this.killParticles();\n  }\n\n  render() {\n    this.p5.background(0);\n    for (let i = 0; i < this.particles.length; i++) {\n      this.particles[i].render();\n    }\n  }\n\n  emitParticles(deltaT: number) {\n    const numNewParticles = Math.floor(PARTICLES_PER_SECOND * deltaT);\n\n    for (let i = 0; i < numNewParticles; i++) {\n      this.particles.push(new Particle(this.p5, this.cameraTarget));\n    }\n  }\n\n  updateParticles(deltaT: number) {\n    for (let i = 0; i < this.particles.length; i++) {\n      this.particles[i].update(deltaT);\n    }\n  }\n\n  killParticles() {\n    this.particles = this.particles.filter((particle) => !particle.isDead);\n  }\n}\n","import P5 from 'p5';\nimport { Fire } from './Fire';\n\nexport const fire = (p5: P5) => {\n  const fire = new Fire(p5, true);\n\n  p5.setup = function () {\n    fire.setup();\n  };\n\n  p5.draw = function () {\n    fire.moveCamera();\n    fire.simulate();\n    fire.render();\n  };\n};\n","import React from 'react';\nimport { PageProps } from 'gatsby';\nimport Layout from '../../../components/Layout';\nimport { Simulation } from '../../../components/Simulation';\nimport { fire } from '../../../simulations/fire';\n\nconst FirePage: React.FC<PageProps> = () => {\n  return (\n    <Layout title=\"Fire Particle System\">\n      <h1>Fire Particle System</h1>\n      <Simulation sketch={fire} />\n    </Layout>\n  );\n};\n\nexport default FirePage;\n","export const randomFromTo = (min: number, max: number) => (max - min) * Math.random() + min;\n"],"sourceRoot":""}