{"version":3,"sources":["webpack:///./src/simulations/bouncing-ball/BouncingBall.ts","webpack:///./src/simulations/bouncing-ball/constants.ts","webpack:///./src/simulations/bouncing-ball/index.ts","webpack:///./src/pages/projects/simulations/bouncing-ball.tsx"],"names":["BouncingBall","p5","position","x","y","velocity","currMS","prevMS","this","setup","width","height","millis","simulateFrame","deltaT","calculateTime","bounce","updatePosition","handleUserInput","render","background","color","ellipse","RADIUS","mouseIsPressed","mouseButton","LEFT","cursor","MOVE","mouseX","mouseY","pmouseX","pmouseY","HAND","bouncingBall","ball","createCanvas","canvasDimensions","draw","ProceduralDungeonPage","Layout","title","Simulation","sketch"],"mappings":"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","file":"component---src-pages-projects-simulations-bouncing-ball-tsx-edb24b4ee58bc31d19f3.js","sourcesContent":["import P5 from 'p5';\nimport { COR, COF, GRAVITY, RADIUS } from './constants';\nimport { Coordinates } from './types';\n\nexport class BouncingBall {\n  position: Coordinates = { x: 0, y: 0 };\n  velocity: Coordinates = { x: 0, y: 0 };\n  currMS: number = 0;\n  prevMS: number = 0;\n  p5: P5;\n\n  constructor(p5: P5) {\n    this.p5 = p5;\n  }\n\n  setup() {\n    // Place the ball in the center of the canvas\n    this.position = {\n      x: this.p5.width / 2,\n      y: this.p5.height / 2,\n    };\n\n    // Initialize the timing\n    this.currMS = this.p5.millis();\n    this.prevMS = this.currMS;\n  }\n\n  simulateFrame() {\n    const deltaT = this.calculateTime();\n    this.bounce();\n    this.updatePosition(deltaT);\n    this.handleUserInput(deltaT);\n  }\n\n  render() {\n    this.p5.background(0);\n    this.p5.color(255);\n    this.p5.ellipse(this.position.x, this.position.y, RADIUS * 2, RADIUS * 2);\n  }\n\n  /** Determine how many seconds have passed since the previous frame. */\n  calculateTime() {\n    this.prevMS = this.currMS;\n    this.currMS = this.p5.millis();\n\n    return (this.currMS - this.prevMS) / 1000;\n  }\n\n  /** If the ball is too close to an edge, reset it and reverse its velocity. */\n  bounce() {\n    // floor\n    if (this.position.y + RADIUS >= this.p5.height && this.velocity.y >= 0) {\n      this.position.y = this.p5.height - RADIUS;\n      this.velocity.x *= COF;\n      this.velocity.y *= -COR;\n    }\n\n    // ceiling\n    if (this.position.y - RADIUS <= 0 && this.velocity.y <= 0) {\n      this.position.y = RADIUS;\n      this.velocity.x *= COF;\n      this.velocity.y *= -COR;\n    }\n\n    // right wall\n    if (this.position.x + RADIUS >= this.p5.width && this.velocity.x >= 0) {\n      this.position.x = this.p5.width - RADIUS;\n      this.velocity.x *= -COR;\n      this.velocity.y *= COF;\n    }\n\n    // left wall\n    if (this.position.x - RADIUS <= 0 && this.velocity.x <= 0) {\n      this.position.x = RADIUS;\n      this.velocity.x *= -COR;\n      this.velocity.y *= COF;\n    }\n  }\n\n  /** Moves the ball based on its velocity. */\n  updatePosition(deltaT: number) {\n    this.velocity.y += GRAVITY * deltaT;\n\n    this.position.x += this.velocity.x * deltaT;\n    this.position.y += this.velocity.y * deltaT;\n  }\n\n  /** Let the user pick up and throw the ball */\n  handleUserInput(deltaT: number) {\n    if (this.p5.mouseIsPressed && this.p5.mouseButton === this.p5.LEFT) {\n      this.p5.cursor(this.p5.MOVE);\n      this.position.x = this.p5.mouseX;\n      this.position.y = this.p5.mouseY;\n\n      this.velocity.x = (this.p5.mouseX - this.p5.pmouseX) / deltaT;\n      this.velocity.y = (this.p5.mouseY - this.p5.pmouseY) / deltaT;\n    } else {\n      this.p5.cursor(this.p5.HAND);\n    }\n  }\n}\n","/** The radius of the ball. */\nexport const RADIUS = 20;\n/** The force of gravity. Since simulations don't use real units, this is set to whatever \"feels\" right. */\nexport const GRAVITY = 400;\n/** **Coefficient of Restitution */\nexport const COR = 0.8;\n/** **Coefficient of Friction */\nexport const COF = 0.98;\n","import P5 from 'p5';\nimport { canvasDimensions } from '../util';\nimport { BouncingBall } from './BouncingBall';\n\nexport const bouncingBall = (p5: P5) => {\n  const ball = new BouncingBall(p5);\n\n  p5.setup = function () {\n    p5.createCanvas(...canvasDimensions());\n\n    // initialize the ball\n    ball.setup();\n  };\n\n  p5.draw = function () {\n    ball.simulateFrame();\n    ball.render();\n  };\n};\n","import React from 'react';\nimport { PageProps } from 'gatsby';\nimport Layout from '../../../components/Layout';\nimport { Simulation } from '../../../components/Simulation';\nimport { bouncingBall } from '../../../simulations/bouncing-ball';\n\nconst ProceduralDungeonPage: React.FC<PageProps> = () => {\n  return (\n    <Layout title=\"Bouncing Ball\">\n      <h1>Bouncing Ball</h1>\n      <Simulation sketch={bouncingBall} />\n    </Layout>\n  );\n};\n\nexport default ProceduralDungeonPage;\n"],"sourceRoot":""}