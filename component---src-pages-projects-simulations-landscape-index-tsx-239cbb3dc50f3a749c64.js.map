{"version":3,"sources":["webpack:///./src/components/Button/index.tsx","webpack:///./src/pages/projects/simulations/landscape/landscape.module.css","webpack:///./src/simulations/landscape/legend.module.css","webpack:///./src/components/Button/button.module.css","webpack:///./src/simulations/landscape/constants.ts","webpack:///./src/simulations/landscape/util.ts","webpack:///./src/simulations/landscape/NoiseWave.ts","webpack:///./src/simulations/landscape/Biome.ts","webpack:///./src/simulations/landscape/TileGrid.ts","webpack:///./src/simulations/landscape/Landscape.ts","webpack:///./src/simulations/landscape/index.ts","webpack:///./src/simulations/landscape/MapLegend.tsx","webpack:///./src/pages/projects/simulations/landscape/index.tsx","webpack:///./src/components/Select/select.module.css","webpack:///./src/components/Select/index.tsx","webpack:///./src/simulations/util/helpers.ts"],"names":["Button","forwardRef","ref","children","props","type","className","styles","button","module","exports","ELEVATION_COLORS","TEMPERATURE_COLORS","PRECIPITATION_COLORS","allMapTypes","gradient","p5","percent","colors","length","color","diffRed","red","diffGreen","green","diffBlue","blue","i","max","min","slice","step","steps","NoiseWave","seed","frequency","amplitude","this","getValueAt","row","column","noise","x","y","NoiseWaveStack","scale","numWaves","waves","layer","Math","pow","waveSeed","randomFromTo","push","reduce","acc","wave","result","norm","Biome","title","biomeColor","toString","WATER","TUNDRA","MOUNTAIN","SNOWY","ROCKY","TEMPERATE","MARSH","DESERT","PRAIRIE","RAINFOREST","allBiomes","TileGrid","tileSize","rows","floor","height","columns","width","elevationNoiseStack","randomSeed","precipitationNoiseStack","climateNoiseStack","tiles","Array","r","c","elevation","precipitation","temperature","multiplier","render","mapType","noStroke","forEach","tile","setTileFill","rect","temp","precip","fill","biome","Landscape","setup","createWorld","tileGrid","updateMapType","newMapType","Simulation","proceduralLandscape","buttonRef","selectRef","landscape","current","addEventListener","e","preventDefault","target","value","colorsByMapType","MapLegend","biomeList","map","key","style","labels","gradientLegend","index","gradientChunk","LandscapePage","location","useState","setMapType","useRef","tileSizeString","search","replace","split","paramPair","find","Number","undefined","Layout","href","sketch","controls","Select","label","onChange","select","random"],"mappings":"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","file":"component---src-pages-projects-simulations-landscape-index-tsx-239cbb3dc50f3a749c64.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport styles from './button.module.css';\n\nexport const Button = forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement>>(\n  ({ children, ...props }, ref) => {\n    return (\n      <button ref={ref} type=\"button\" {...props} className={styles.button}>\n        {children}\n      </button>\n    );\n  },\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"landscape-module--controls--2ouir\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"biomeList\":\"legend-module--biomeList--FhW6c\",\"endcap\":\"legend-module--endcap--1UM4E\",\"labels\":\"legend-module--labels--FlKeS\",\"gradientLegend\":\"legend-module--gradientLegend--EuXXE\",\"gradientChunk\":\"legend-module--gradientChunk--2odrr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button-module--button--1AP7e\"};","import { MapType } from './types';\n\nexport const ELEVATION_SCALE = 0.07;\nexport const CLIMATE_SCALE = 0.007;\nexport const PRECIPITATION_SCALE = 0.002;\n/** The elevation below which to render water. Elevation ranges from 0 to 1. */\nexport const SEA_LEVEL = 0.4;\n/** Width/height of each tile in pixels */\nexport const TILE_SIZE = 10;\n\n// Colors\nexport const WATER_COLOR = '#6485dc';\nexport const ELEVATION_COLORS = ['#005000', '#005000', '#aab432', '#d2e66e'];\nexport const TEMPERATURE_COLORS = ['#0000ff', '#ffffff', '#ff0000'];\nexport const PRECIPITATION_COLORS = [\n  '#960000',\n  '#960000',\n  '#fa9600',\n  '#ffffff',\n  '#009600',\n  '#00ffff',\n  '#00ffff',\n];\n\nexport const allMapTypes: MapType[] = ['elevation', 'temperature', 'precipitation', 'biome'];\n","import P5 from 'p5';\n\n/**\n * Takes a percent and an array of colors.\n * Returns the color at that percent along a gradient across the array of colors.\n */\nexport const gradient = (p5: P5, percent: number, colors: string[]): P5.Color => {\n  if (colors.length === 0) return p5.color('#000000');\n\n  if (colors.length === 1) return p5.color(colors[0]);\n\n  if (colors.length === 2) {\n    const diffRed = p5.red(colors[1]) - p5.red(colors[0]);\n    const diffGreen = p5.green(colors[1]) - p5.green(colors[0]);\n    const diffBlue = p5.blue(colors[1]) - p5.blue(colors[0]);\n\n    return p5.color(\n      p5.red(colors[0]) + diffRed * percent,\n      p5.green(colors[0]) + diffGreen * percent,\n      p5.blue(colors[0]) + diffBlue * percent,\n    );\n  }\n\n  for (let i = 0; i < colors.length - 1; i++) {\n    const max = (1.0 / (colors.length - 1)) * (i + 1);\n    const min = (1.0 / (colors.length - 1)) * i;\n\n    if (percent < max) {\n      return gradient(p5, (percent - min) / (max - min), colors.slice(i, i + 2));\n    }\n  }\n\n  return p5.color(colors[colors.length - 1]);\n};\n\n/**\n * Takes a number of steps, a percent, and an array of colors.\n * Returns the color at that percent along a stepped gradient across the array of colors.\n */\nexport const step = (p5: P5, steps: number, percent: number, colors: string[]) => {\n  for (let i = 0; i < steps; i++) {\n    const step = (1 / steps) * (i + 1);\n    if (percent < step) {\n      return gradient(p5, step, colors);\n    }\n  }\n\n  return p5.color(colors[colors.length - 1]);\n};\n","import P5 from 'p5';\nimport { randomFromTo } from '../util/helpers';\nimport { Coordinates } from '../util/types';\n\n/** A wrapper around the P5 noise function to allow for the use of wave-like parameters. */\nexport class NoiseWave {\n  p5: P5;\n  seed: Coordinates;\n  frequency: number;\n  amplitude: number;\n\n  constructor(p5: P5, seed: Coordinates, frequency: number, amplitude: number) {\n    this.p5 = p5;\n    this.seed = seed;\n    this.frequency = frequency;\n    this.amplitude = amplitude;\n  }\n\n  getValueAt(row: number, column: number) {\n    return (\n      this.amplitude *\n      this.p5.noise((this.seed.x + column) * this.frequency, (this.seed.y + row) * this.frequency)\n    );\n  }\n}\n\nexport class NoiseWaveStack {\n  p5: P5;\n  waves: NoiseWave[];\n\n  constructor(p5: P5, seed: Coordinates, scale: number, numWaves: number) {\n    this.p5 = p5;\n    this.waves = [];\n\n    for (let i = 0; i < numWaves; i++) {\n      const layer = Math.pow(2, i);\n      const waveSeed = {\n        x: seed.x + randomFromTo(layer - 1, layer),\n        y: seed.y + randomFromTo(layer - 1, layer),\n      };\n\n      this.waves.push(new NoiseWave(this.p5, waveSeed, scale / layer, layer));\n    }\n  }\n\n  getValueAt(row: number, column: number) {\n    const { result, max } = this.waves.reduce(\n      (acc, wave) => ({\n        result: acc.result + wave.getValueAt(row, column),\n        max: acc.max + wave.amplitude,\n      }),\n      { result: 0, max: 0 },\n    );\n\n    return max > 0 ? this.p5.norm(result, 0, max) : 0;\n  }\n}\n","import { WATER_COLOR } from './constants';\n\nclass Biome {\n  title: string;\n  color: string;\n\n  constructor(title: string, biomeColor: string) {\n    this.title = title;\n    this.color = biomeColor;\n  }\n\n  toString() {\n    return this.title;\n  }\n}\n\n// Loosely based on the Koppen climate classification\nconst WATER = new Biome('Water', WATER_COLOR);\n\nconst TUNDRA = new Biome('Tundra', '#cdccf1'); // low  temp, low  precip\nconst MOUNTAIN = new Biome('Mountain', '#6d65b2'); // low  temp, mid  precip\nconst SNOWY = new Biome('Snowy', '#d4ffff'); // low  temp, high precip\n\nconst ROCKY = new Biome('Rocky', '#556973'); // mid  temp, low  precip\nconst TEMPERATE = new Biome('Temperate', '#126341'); // mid  temp, mid  precip\nconst MARSH = new Biome('Marsh', '#a8dd75'); // mid  temp, high precip\n\nconst DESERT = new Biome('Desert', '#e3b365'); // high temp, low  precip\nconst PRAIRIE = new Biome('Prairie', '#48a32f'); // high temp, mid  precip\nconst RAINFOREST = new Biome('Rainforest', '#e33d00'); // high temp, high precip\n\nconst LOW_MAX = 0.45;\nconst MID_MAX = 0.55;\n\nexport const getBiome = (temp: number, precip: number) => {\n  if (temp < LOW_MAX) {\n    if (precip < LOW_MAX) return TUNDRA;\n\n    if (precip < MID_MAX) return MOUNTAIN;\n\n    return SNOWY;\n  }\n\n  if (temp < MID_MAX) {\n    if (precip < LOW_MAX) return ROCKY;\n\n    if (precip < MID_MAX) return TEMPERATE;\n\n    return MARSH;\n  }\n\n  if (precip < LOW_MAX) return DESERT;\n\n  if (precip < MID_MAX) return PRAIRIE;\n\n  return RAINFOREST;\n};\n\nexport const allBiomes = [\n  WATER,\n  TUNDRA,\n  MOUNTAIN,\n  SNOWY,\n  ROCKY,\n  TEMPERATE,\n  MARSH,\n  DESERT,\n  PRAIRIE,\n  RAINFOREST,\n];\n","import P5 from 'p5';\nimport { Tile, MapType } from './types';\nimport {\n  CLIMATE_SCALE,\n  ELEVATION_COLORS,\n  ELEVATION_SCALE,\n  PRECIPITATION_COLORS,\n  PRECIPITATION_SCALE,\n  SEA_LEVEL,\n  TEMPERATURE_COLORS,\n  WATER_COLOR,\n} from './constants';\nimport { step } from './util';\nimport { NoiseWaveStack } from './NoiseWave';\nimport { randomFromTo } from '../util/helpers';\nimport { getBiome } from './Biome';\n\nexport class TileGrid {\n  rows: number;\n  columns: number;\n  p5: P5;\n  tiles: Tile[][];\n  tileSize: number;\n\n  constructor(p5: P5, tileSize: number) {\n    this.p5 = p5;\n    this.tileSize = tileSize;\n    this.rows = Math.floor(this.p5.height / this.tileSize);\n    this.columns = Math.floor(this.p5.width / this.tileSize);\n    const elevationNoiseStack = new NoiseWaveStack(\n      this.p5,\n      this.randomSeed(400),\n      ELEVATION_SCALE * this.tileSize,\n      4,\n    );\n    const precipitationNoiseStack = new NoiseWaveStack(\n      this.p5,\n      this.randomSeed(800),\n      PRECIPITATION_SCALE * this.tileSize,\n      2,\n    );\n    const climateNoiseStack = new NoiseWaveStack(\n      this.p5,\n      this.randomSeed(800),\n      CLIMATE_SCALE * this.tileSize,\n      2,\n    );\n    const multiplier = 0.75;\n\n    this.tiles = new Array(this.rows);\n\n    for (let r = 0; r < this.rows; r++) {\n      this.tiles[r] = new Array(this.columns);\n      for (let c = 0; c < this.columns; c++) {\n        const elevation = elevationNoiseStack.getValueAt(r, c);\n        this.tiles[r][c] = {\n          elevation,\n          precipitation: precipitationNoiseStack.getValueAt(r, c),\n          temperature: this.p5.norm(\n            climateNoiseStack.getValueAt(r, c) - multiplier * (elevation - 0.5),\n            multiplier * -0.5,\n            1 + multiplier * 0.5,\n          ),\n        };\n      }\n    }\n  }\n\n  render(mapType: MapType) {\n    this.p5.noStroke();\n    this.tiles.forEach((row, r) =>\n      row.forEach((tile, c) => {\n        this.setTileFill(mapType, tile);\n        this.p5.rect(c * this.tileSize, r * this.tileSize, this.tileSize, this.tileSize);\n      }),\n    );\n  }\n\n  setTileFill(mapType: MapType, tile: Tile) {\n    if (tile.elevation < SEA_LEVEL) {\n      this.p5.fill(WATER_COLOR);\n      return;\n    }\n\n    switch (mapType) {\n      case 'elevation':\n        this.p5.fill(step(this.p5, 15, tile.elevation, ELEVATION_COLORS));\n        break;\n      case 'temperature':\n        this.p5.fill(step(this.p5, 15, tile.temperature, TEMPERATURE_COLORS));\n        break;\n      case 'precipitation':\n        this.p5.fill(step(this.p5, 15, tile.precipitation, PRECIPITATION_COLORS));\n        break;\n      case 'biome':\n        const biome = getBiome(tile.temperature, tile.precipitation);\n        this.p5.fill(biome.color);\n        break;\n    }\n  }\n\n  randomSeed(scale = 1) {\n    return {\n      x: randomFromTo(0, this.columns) * scale,\n      y: randomFromTo(0, this.rows) * scale,\n    };\n  }\n}\n","import P5 from 'p5';\nimport { Simulation } from '../util/Simulation';\nimport { TileGrid } from './TileGrid';\nimport { MapType } from './types';\n\nexport class Landscape extends Simulation {\n  tileGrid!: TileGrid;\n  mapType: MapType = 'elevation';\n  tileSize: number;\n\n  constructor(p5: P5, tileSize: number) {\n    super(p5);\n    this.tileSize = tileSize;\n  }\n\n  setup() {\n    super.setup();\n    this.createWorld();\n    this.render();\n  }\n\n  createWorld() {\n    this.tileGrid = new TileGrid(this.p5, this.tileSize);\n  }\n\n  render() {\n    this.tileGrid.render(this.mapType);\n  }\n\n  updateMapType(newMapType: MapType) {\n    this.mapType = newMapType;\n    this.render();\n  }\n}\n","import P5 from 'p5';\nimport { RefObject } from 'react';\nimport { Landscape } from './Landscape';\nimport { TILE_SIZE } from './constants';\n\nexport const proceduralLandscape = (\n  buttonRef: RefObject<HTMLButtonElement>,\n  selectRef: RefObject<HTMLSelectElement>,\n  tileSize = TILE_SIZE,\n) => (p5: P5) => {\n  const landscape = new Landscape(p5, tileSize);\n\n  p5.setup = function () {\n    landscape.setup();\n  };\n\n  // TODO: there's got to be a better way to do this\n  buttonRef.current?.addEventListener('click', (e) => {\n    e.preventDefault();\n\n    landscape.createWorld();\n    landscape.render();\n  });\n\n  // TODO: there's got to be a better way to do this\n  selectRef.current?.addEventListener('change', (e) => {\n    e.preventDefault();\n\n    // @ts-expect-error\n    const mapType = e.target?.value;\n\n    landscape.updateMapType(mapType);\n  });\n};\n","import React from 'react';\nimport { allBiomes } from './Biome';\nimport { ELEVATION_COLORS, PRECIPITATION_COLORS, TEMPERATURE_COLORS } from './constants';\nimport { MapType } from './types';\nimport styles from './legend.module.css';\n\ninterface Props {\n  mapType: MapType;\n}\n\nconst colorsByMapType: Record<MapType, string[]> = {\n  elevation: ELEVATION_COLORS,\n  precipitation: PRECIPITATION_COLORS,\n  temperature: TEMPERATURE_COLORS,\n  biome: [],\n};\n\nexport const MapLegend: React.FC<Props> = ({ mapType }) => {\n  if (mapType === 'biome')\n    return (\n      <div>\n        <b>Biomes</b>\n        <ul className={styles.biomeList}>\n          {allBiomes.map(({ title, color }) => (\n            // @ts-expect-error\n            <li key={title} style={{ '--biome-color': color }}>\n              {title}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n\n  const colors = colorsByMapType[mapType];\n\n  return (\n    <div>\n      <div className={styles.labels}>\n        <div>Low</div>\n        <div>High</div>\n      </div>\n      <div className={styles.gradientLegend}>\n        {colors.map((color, index) => {\n          if (index === 0) return null;\n\n          return (\n            <div\n              key={`${color}-${index}`}\n              className={styles.gradientChunk}\n              // @ts-expect-error\n              style={{ '--start-color': colors[index - 1], '--end-color': color }}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React, { useRef, useState } from 'react';\nimport { PageProps } from 'gatsby';\nimport Layout from '../../../../components/Layout';\nimport { Simulation } from '../../../../components/Simulation';\nimport { proceduralLandscape } from '../../../../simulations/landscape';\nimport { allMapTypes } from '../../../../simulations/landscape/constants';\nimport { Select } from '../../../../components/Select';\nimport { Button } from '../../../../components/Button';\nimport styles from './landscape.module.css';\nimport { MapType } from '../../../../simulations/landscape/types';\nimport { MapLegend } from '../../../../simulations/landscape/MapLegend';\nimport { ExternalLink, InternalLink } from '../../../../components/Link';\n\nconst LandscapePage: React.FC<PageProps> = ({ location }) => {\n  const [mapType, setMapType] = useState<MapType>('elevation');\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const queryParams = location.search\n    .replace('?', '')\n    .split('&')\n    .map((paramPair) => paramPair.split('='));\n  const tileSizeString = queryParams.find(([paramName]) => paramName === 'tileSize')?.[1];\n  const tileSize = tileSizeString ? Number(tileSizeString) : undefined;\n\n  return (\n    <Layout title=\"Landscape Generator\">\n      <h1>Landscape Generator</h1>\n      <div>\n        A procedural landscape generator that uses two-dimensional{' '}\n        <ExternalLink href=\"https://en.wikipedia.org/wiki/Perlin_noise\">Perlin noise</ExternalLink>{' '}\n        to create a grid of tiles with elevation, precipitation, and climate values. The temperature\n        for each tile is determined by both its elevation and its climate. From there, each tile is\n        assigned to a biome (Rainforest, Desert, etc.) based on its temperature and its\n        precipitation.\n      </div>\n      <h2>Demo</h2>\n      <Simulation sketch={proceduralLandscape(buttonRef, selectRef, tileSize)} />\n      <MapLegend mapType={mapType} />\n      <div className={styles.controls}>\n        <div>\n          <Select\n            label=\"Map Type\"\n            ref={selectRef}\n            onChange={(e) => {\n              setMapType(e.target.value as MapType);\n            }}\n          >\n            {allMapTypes.map((mapType) => (\n              <option key={mapType} value={mapType}>\n                {mapType}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <Button ref={buttonRef}>Generate a new landscape</Button>\n      </div>\n    </Layout>\n  );\n};\n\nexport default LandscapePage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"select-module--select--3j8Sy\",\"label\":\"select-module--label--2swTM\"};","import React, { forwardRef } from 'react';\nimport styles from './select.module.css';\n\nexport interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label: string;\n}\n\nexport const Select = forwardRef<HTMLSelectElement, SelectProps>(\n  ({ children, label, ...props }, ref) => {\n    return (\n      <label className={styles.select}>\n        <span className={styles.label}>{label}</span>\n        <select ref={ref} {...props}>\n          {children}\n        </select>\n      </label>\n    );\n  },\n);\n","export const randomFromTo = (min: number, max: number) => (max - min) * Math.random() + min;\n"],"sourceRoot":""}