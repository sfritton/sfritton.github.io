{"version":3,"sources":["webpack:///./src/simulations/util/PhysicsSimulation.ts","webpack:///./src/simulations/bouncing-ball/BouncingBall.ts","webpack:///./src/simulations/bouncing-ball/constants.ts","webpack:///./src/simulations/bouncing-ball/index.ts","webpack:///./src/pages/projects/simulations/bouncing-ball.tsx"],"names":["PhysicsSimulation","p5","verbose","startMS","currMS","prevMS","frames","setup","this","millis","calculateTime","fps","Math","floor","console","log","Simulation","BouncingBall","position","x","y","velocity","width","height","simulateFrame","deltaT","bounce","updatePosition","handleUserInput","render","noStroke","background","fill","ellipse","RADIUS","cursor","HAND","isMousePressed","MOVE","mouseX","mouseY","pmouseX","pmouseY","bouncingBall","ball","draw","BouncingBallPage","Layout","title","sketch","style","marginTop"],"mappings":"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","file":"component---src-pages-projects-simulations-bouncing-ball-tsx-332ca02ee64170506522.js","sourcesContent":["import P5 from 'p5';\nimport { Simulation } from './Simulation';\n\nexport class PhysicsSimulation extends Simulation {\n  /** Enable additional console logging. Just average FPS for now. */\n  verbose = false;\n  /** A timestamp of the simulation start time. */\n  startMS = 0;\n  /** A timestamp of the beginning of the current frame. */\n  currMS = 0;\n  /** A timestamp of the beginning of the previous frame. */\n  prevMS = 0;\n  /** The total number of frames that have been rendered. */\n  frames = 0;\n\n  /** Pass the verbose flag to show the average FPS */\n  constructor(p5: P5, verbose?: boolean) {\n    super(p5);\n    this.verbose = verbose ?? false;\n  }\n\n  /** Call during p5.setup to create the canvas and initialize the timing. */\n  setup() {\n    // create the canvas\n    super.setup();\n\n    // Initialize the timing\n    this.currMS = this.p5.millis();\n    this.startMS = this.currMS;\n    this.prevMS = this.currMS;\n  }\n\n  /** Determine how many seconds have passed since the previous frame. */\n  calculateTime() {\n    this.frames++;\n    this.prevMS = this.currMS;\n    this.currMS = this.p5.millis();\n\n    if (this.verbose) {\n      const fps = Math.floor((this.frames / (this.currMS - this.startMS)) * 1000);\n      console.log(`Running at ${fps} FPS`);\n    }\n\n    return (this.currMS - this.prevMS) / 1000;\n  }\n}\n","import { PhysicsSimulation } from '../util/PhysicsSimulation';\nimport { COR, COF, GRAVITY, RADIUS } from './constants';\nimport { Coordinates } from '../util/types';\n\nexport class BouncingBall extends PhysicsSimulation {\n  position: Coordinates = { x: 0, y: 0 };\n  velocity: Coordinates = { x: 0, y: 0 };\n\n  setup() {\n    super.setup();\n\n    // Place the ball in the center of the canvas\n    this.position = {\n      x: this.p5.width / 2,\n      y: this.p5.height / 2,\n    };\n  }\n\n  simulateFrame() {\n    const deltaT = this.calculateTime();\n    this.bounce();\n    this.updatePosition(deltaT);\n    this.handleUserInput(deltaT);\n  }\n\n  render() {\n    this.p5.noStroke();\n    this.p5.background('#008060');\n    this.p5.fill('#65ffda');\n    this.p5.ellipse(this.position.x, this.position.y, RADIUS * 2, RADIUS * 2);\n  }\n\n  /** If the ball is too close to an edge, reset it and reverse its velocity. */\n  bounce() {\n    // floor\n    if (this.position.y + RADIUS >= this.p5.height && this.velocity.y >= 0) {\n      this.position.y = this.p5.height - RADIUS;\n      this.velocity.x *= COF;\n      this.velocity.y *= -COR;\n    }\n\n    // ceiling\n    if (this.position.y - RADIUS <= 0 && this.velocity.y <= 0) {\n      this.position.y = RADIUS;\n      this.velocity.x *= COF;\n      this.velocity.y *= -COR;\n    }\n\n    // right wall\n    if (this.position.x + RADIUS >= this.p5.width && this.velocity.x >= 0) {\n      this.position.x = this.p5.width - RADIUS;\n      this.velocity.x *= -COR;\n      this.velocity.y *= COF;\n    }\n\n    // left wall\n    if (this.position.x - RADIUS <= 0 && this.velocity.x <= 0) {\n      this.position.x = RADIUS;\n      this.velocity.x *= -COR;\n      this.velocity.y *= COF;\n    }\n  }\n\n  /** Moves the ball based on its velocity. */\n  updatePosition(deltaT: number) {\n    this.velocity.y += GRAVITY * deltaT;\n\n    this.position.x += this.velocity.x * deltaT;\n    this.position.y += this.velocity.y * deltaT;\n  }\n\n  /** Let the user pick up and throw the ball */\n  handleUserInput(deltaT: number) {\n    this.p5.cursor(this.p5.HAND);\n\n    // Do nothing if the mouse is not pressed\n    if (!this.isMousePressed()) return;\n\n    this.p5.cursor(this.p5.MOVE);\n    this.position.x = this.p5.mouseX;\n    this.position.y = this.p5.mouseY;\n\n    this.velocity.x = (this.p5.mouseX - this.p5.pmouseX) / deltaT;\n    this.velocity.y = (this.p5.mouseY - this.p5.pmouseY) / deltaT;\n  }\n}\n","/** The radius of the ball. */\nexport const RADIUS = 20;\n/** The force of gravity. Since simulations don't use real units, this is set to whatever \"feels\" right. */\nexport const GRAVITY = 800;\n/** **Coefficient of Restitution */\nexport const COR = 0.8;\n/** **Coefficient of Friction */\nexport const COF = 0.98;\n","import P5 from 'p5';\nimport { BouncingBall } from './BouncingBall';\n\nexport const bouncingBall = (p5: P5) => {\n  const ball = new BouncingBall(p5);\n\n  p5.setup = function () {\n    ball.setup();\n  };\n\n  p5.draw = function () {\n    ball.simulateFrame();\n    ball.render();\n  };\n};\n","import React from 'react';\nimport { PageProps } from 'gatsby';\nimport Layout from '../../../components/Layout';\nimport { Simulation } from '../../../components/Simulation';\nimport { bouncingBall } from '../../../simulations/bouncing-ball';\n\nconst BouncingBallPage: React.FC<PageProps> = () => {\n  return (\n    <Layout title=\"Bouncing Ball\">\n      <h1>Bouncing Ball</h1>\n      <Simulation sketch={bouncingBall} />\n      <div>A simple physics simulation. Try throwing the ball by clicking and dragging it.</div>\n      <div style={{ marginTop: 'var(--space-md)' }}>\n        <b>Note:</b> This doesn't work the best on touchscreens.\n      </div>\n    </Layout>\n  );\n};\n\nexport default BouncingBallPage;\n"],"sourceRoot":""}